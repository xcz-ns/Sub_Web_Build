name: 构建 sub-web 镜像

on:
  workflow_dispatch:
  schedule:
    - cron: '0 22,4 * * *'  # 6点和12点（北京时间），UTC时间提前8小时

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"
  TG_BOT_TOKEN: "${{ secrets.TG_BOT_TOKEN }}"
  TG_CHAT_ID: "${{ secrets.TG_CHAT_ID }}"

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v2

    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: 构建 Docker 镜像
      id: build-image
      run: |
        docker build --platform linux/amd64 -t subweb:latest .
        docker images

    - name: 保存 Docker 镜像为 tar 包
      run: |
        docker save subweb:latest -o subweb_latest.tar
        ls -lh subweb_latest.tar

    - name: 设置动态标签
      id: set-tag
      run: echo "RELEASE_TAG=v$(date +'%Y%m%d.%H%M%S')" >> $GITHUB_ENV

    - name: 上传 Docker 镜像到 GitHub Releases
      uses: ncipollo/release-action@v1
      with:
        artifacts: subweb_latest.tar
        tag: ${{ env.RELEASE_TAG }}
        name: subweb_latest.tar
        generateReleaseNotes: false
        makeLatest: true

    - name: 登录阿里云容器镜像服务
      run: |
        echo "${{ env.ALIYUN_REGISTRY_PASSWORD }}" | docker login $ALIYUN_REGISTRY -u $ALIYUN_REGISTRY_USER --password-stdin

    - name: 推送镜像到阿里云
      id: push-image
      run: |
        set -e
        IMAGE_NAME=subweb:latest
        ALIYUN_IMAGE=$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$IMAGE_NAME
        docker tag $IMAGE_NAME $ALIYUN_IMAGE
        if docker push $ALIYUN_IMAGE; then
          echo "PUSH_RESULT=success" >> $GITHUB_ENV
        else
          echo "PUSH_RESULT=failure" >> $GITHUB_ENV
        fi
        docker rmi $IMAGE_NAME $ALIYUN_IMAGE || true

    - name: 发送 Telegram 通知
      if: always()
      run: |
        DISPLAY_NAME="sub-web 镜像构建"
        BUILD_TIME=$(TZ='Asia/Shanghai' date "+%Y-%m-%d %H:%M:%S")
        STATUS="sub-web 镜像构建失败"
        [[ "${{ env.PUSH_RESULT }}" == "success" ]] && STATUS="sub-web 镜像构建成功"

        MSG="📦 镜像名称：$DISPLAY_NAME\n📅 构建时间：$BUILD_TIME\n✅ 状态：$STATUS"

        printf "%b" "$MSG" | curl -s -X POST "https://api.telegram.org/bot$TG_BOT_TOKEN/sendMessage" \
          -d chat_id="$TG_CHAT_ID" \
          -d parse_mode="Markdown" \
          --data-urlencode "text=$(printf "%b" "$MSG")"
