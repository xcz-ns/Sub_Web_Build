name: 构建 sub-web 镜像

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 3,6'

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"
  TG_BOT_TOKEN: "${{ secrets.TG_BOT_TOKEN }}"
  TG_CHAT_ID: "${{ secrets.TG_CHAT_ID }}"

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v2

    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: 构建 Docker 镜像
      id: build-image
      run: |
        docker build --platform linux/amd64 -t subweb:latest .
        docker images

    - name: 保存 Docker 镜像为 tar 包
      run: |
        docker save subweb:latest -o subweb_latest.tar
        ls -lh subweb_latest.tar

    - name: 登录阿里云容器镜像服务
      run: |
        echo "${{ env.ALIYUN_REGISTRY_PASSWORD }}" | docker login $ALIYUN_REGISTRY -u $ALIYUN_REGISTRY_USER --password-stdin

    - name: 推送镜像到阿里云
      id: push-image
      run: |
        set -e
        IMAGE_NAME=subweb:latest
        ALIYUN_IMAGE=$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$IMAGE_NAME
        docker tag $IMAGE_NAME $ALIYUN_IMAGE
        if docker push $ALIYUN_IMAGE; then
          echo "PUSH_RESULT=success" >> $GITHUB_ENV
        else
          echo "PUSH_RESULT=failure" >> $GITHUB_ENV
        fi
        docker rmi $ALIYUN_IMAGE || true

    - name: 发送 Telegram 通知
      if: always()
      run: |
        DISPLAY_NAME="sub-web:latest"
        BUILD_TIME=$(TZ='Asia/Shanghai' date "+%Y-%m-%d %H:%M:%S")
        
        STATUS1="阿里云 ✅"
        
        [[ "${{ env.PUSH_RESULT }}" == "failure" ]] && STATUS1="阿里云 ❌"
        [[ "${{ env.PRIVATE_PUSH_RESULT }}" == "success" ]] && STATUS2="私人仓库 ✅"
        
        MSG="📦 镜像名称：$DISPLAY_NAME\n📅 构建时间：$BUILD_TIME\n\n📤 推送状态：\n- $STATUS1\n- $STATUS2"

        printf "%b" "$MSG" | curl -s -X POST "https://api.telegram.org/bot$TG_BOT_TOKEN/sendMessage" \
          -d chat_id="$TG_CHAT_ID" \
          -d parse_mode="Markdown" \
          --data-urlencode "text=$(printf "%b" "$MSG")"
          
    - name: 删除旧的 Workflow 运行记录
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.REPO_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 0           # 表示清理所有超过 0 天的记录
        keep_minimum_runs: 0     # 最少保留最近 0 次运行记录（你可以改成你需要的数量）
        
    - name: 删除自动发布的旧固件
      uses: shidahuilang/delete-older-releases@main
      with:
        keep_latest: 1 #保留多少个releases不删除
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
